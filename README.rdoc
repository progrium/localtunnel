= localtunnel -- instant public tunnel to your local web server

== Install 

To get the dependencies if you don't have them, type:

    sudo apt-get install ruby ruby1.8-dev rubygems1.8 libopenssl-ruby

Now you can install localtunnel with RubyGems:

    sudo gem install localtunnel 

or to get the source:

    git clone http://github.com/progrium/localtunnel.git

== Usage

    localtunnel [options] <localport>
      -k, --key    FILE    upload a public key for authentication
      -c, --config NAME    load an autoconfiguration plugin

Localtunnel is a client to a free and open source reverse tunneling
service made specifically for web traffic. It's intended to be used to
temporarily expose local web servers to the greater Internet for
debugging, unit tests, demos, etc.   

This is how you make your local port 8080 public:

    $ localtunnel 8080
    Port 8080 is now publicly accessible from http://8bv2.localtunnel.com ...

Using localtunnel is comparable to using SSH reverse/remote port
forwarding on a remote host that has GatewayPorts enabled, but without
all the configuration or the need of a host. The localtunnel command
works with a server component that is running on localtunnel.com,
which is provided as a free service.

If have never run localtunnel before, you'll need to upload a public
key to authenticate. You do this once:

    $ localtunnel -k ~/.ssh/id_rsa.pub 8080

After that, you shouldn't have to use -k again.

Localtunnel can be started before or after the local web server.   It
tunnels through to the url given in that status message "publicly
accessible from..." for as long as the command is running.  The tunnel
is closed if the command exits.

== Advanced

When using localtunnel for local development work against an API that leverages
web hooks, the painful workflow can sometimes look like this:
1.  Run localtunnel
2.  Copy the resulting http address
3.  Log into your API provider and update your 'app' settings using the new address
4.  $$ Profit

You can write code that gets executed by localtunnel after it registers for a new host
and before it sits idle holding the connection open. You can use this to
automate updating web hook settings.

Create a file under a "localtunnel" subdirectory named the same as what you provide to the "-c" parameter.
In that file, simply call the configure method, passing in the name, and providing a block
that receives a configuration object. Currently the configuration object only provides the host.

For example, to configure Twilio every time you run localtunnel, you could create a file:
~/MyApp/localtunnel/twilio.rb

It would contain something like the following:

    require 'rubygems'
    require 'twilio-ruby'
    require 'uri'

    configure "twilio" do |config|
      # set up a client to talk to the Twilio REST API
      account_sid = # your account sid here
      auth_token = # your auth token here
      app_sid = # your app sid you want to update here

      client = Twilio::REST::Client.new(account_sid, auth_token)
      app = client.account.applications.get(app_sid)

      # Grab the current voice_url and status_callback and swap out the host
      voice = URI.parse(app.voice_url)
      voice.host = config.host
      status_callback = URI.parse(app.status_callback)
      status_callback.host = config.host

      app.update({:voice_url => voice.to_s, :status_callback => status_callback.to_s})
      puts "   Configured twilio app #{app.friendly_name} for new host #{config.host}"
    end

Then from the command line

    $ cd ~/MyApp
    $ localtunnel -c twilio 9292
       Configured Twilio app myapp-dev for new host 47sf.localtunnel.com
       Port 9292 is now publicly accessible from http://47sf.localtunnel.com ...

== Contributors

    andyl (andy@r210.com) 
    Charles Merriam (charles.merriam@gmail.com) 
    Hunter Gillane (hunter.gillane@gmail.com) 
    Michael Sofaer (msofaer@pivotallabs.com) 
    Jeff Lindsay (progrium@gmail.com)

== License

MIT
